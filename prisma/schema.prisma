
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id String  @id @db.Uuid @default(uuid())
avatar String @db.Uuid @default(uuid())
name String @db.VarChar(18)
username String @db.VarChar(16) @unique
email String @db.VarChar(100) @unique
password String @db.VarChar(64)
token String? @unique
following Follow[] @relation("user_following")
followers Follow[] @relation("user_followers")
tweets Tweet[]

userLiker Liker[]

@@map("user")
}

model Tweet {
  id String @id @db.Uuid @default(uuid()) @map("id_tweet") @unique
  content String @db.Text
  idUser String @db.Uuid @map("id_user")
  authorTweet String @map("author_Tweet")
  likes Liker[]
  type String @db.VarChar(2)
  idTweetOriginal String? @db.Uuid @map("id_tweet_original")
  tweetOriginal Tweet? @relation("reTweet", fields: [idTweetOriginal], references: [id])
  reTweet Tweet[] @relation("reTweet")
  user User @relation(fields: [idUser], references: [id])
  @@map("tweet")
  @@unique([id, idUser])
}


model Follow {
  id String @id @db.Uuid @default(uuid())
  idUserFollowing String @db.Uuid @map("id_user_following") @unique
  usernameFollowing String @map("username_following") @unique
  idUserFollower String @db.Uuid @map("id_user_follower")
  usernameFollower String @map("username_follower")
  following User @relation("user_following", fields: [idUserFollowing],references: [id], onDelete: Cascade)
  followers User @relation("user_followers",fields: [idUserFollower],references: [id], onDelete: Cascade)

  @@unique([idUserFollowing, idUserFollower], name: "follow_pkey")
  @@map("follows")
}

model Liker {
  idLike String @id @db.Uuid @default(uuid()) @map("id_like")
  idTweet String? @db.Uuid @map("id_tweet")
  idAuthorTweet String? @db.Uuid @map("id_author_Tweet")

  idAuthorLike String @db.Uuid @map("id_author_like")
  authorLike String @map("username_author_like")
  contentTweetLiked String? @db.Text @map("content_tweet_liked")

  tweet Tweet? @relation(fields: [idTweet],references: [id], onDelete: Cascade, onUpdate: SetNull )
  user User @relation(fields: [idAuthorLike], references: [id], onDelete: Cascade)
  @@map("liker")
}


